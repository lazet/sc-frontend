<?xml version="1.0" encoding="utf-8"?>
<c:AbstractInnerModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:c="org.lcf.*"
					   layout="absolute" width="100%" height="100%" creationComplete="onInit(event)" xmlns:util="util.*" >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.validators.Validator;
			
			import org.lcf.EventListenerModel;
			import org.lcf.util.GeneralBundleEvent;
			
			import rpc.RpcEvent;
			import rpc.RpcService;
			
			import spark.components.DataGroup;
			import spark.components.List;
			
			import util.EventTypeDefine;
			import util.ObjectNameDefine;

			protected function onInit(event:FlexEvent):void
			{
				operationArea.container.parentContainer = this.c;
				//加载RPC服务
				var info:SysInfo = c.get(SysInfo.SYSTEM_INFO) as SysInfo;
				var rpcClient:RpcService = new RpcService(info.remoteSiteUrl);
				
				productCategory.addEventListener(util.EventTypeDefine.PRODUCT_CATEGORY_SWITCH_EVENT,onSwitchCategory);
				productCategory.addEventListener(util.EventTypeDefine.PRODUCT_CATEGORY_DELETE_EVENT,onDeleteCategory);
				
				operationArea.container.put(RpcService.RPC_SERVICE, rpcClient)
				operationArea.open("manage/modules/resource/ResourcesMainPage.swf","资源情况","manage/modules/resource/ResourcesMainPage.swf","assets/greenHomePage.jpeg",false,false);
				//加载商品品类列表
				c.dispatch(new RpcEvent("product/category/get",{"pageFrom":"1","size":"50"}));
				//加载交易记录列表

				
			}
			
			override public function  get preferEventListeners():Array
			{
				var getProductCategorySuccess:EventListenerModel = new EventListenerModel("getProductCategory.success",onGetProductCategorySuccess);
				var deleteProductCategorySuccess:EventListenerModel = new EventListenerModel("deleteProductCategory.success",onGetProductCategorySuccess);
				var addProductCategorySuccess:EventListenerModel = new EventListenerModel("addProductCategory.success",onAddProductCategorySuccess);
				var addProductCategoryFailed:EventListenerModel = new EventListenerModel("addProductCategory.failed",onAddProductCategoryFailed);
				return [getProductCategorySuccess,deleteProductCategorySuccess, addProductCategorySuccess, addProductCategoryFailed];
			}
			protected function onGetProductCategorySuccess(e:GeneralBundleEvent):void{
				var results:Array = e.bundle as Array;
				results.splice(0,0,{"label":"全部"});
				productCategory.dataProvider = new ArrayCollection(results);
				
			}
			protected function onResourceCenter(e:MouseEvent):void{
				operationArea.open("manage/modules/resource/ResourcesMainPage.swf","资源情况","manage/modules/resource/ResourcesMainPage.swf","assets/greenHomePage.jpeg",false,false);
			}
			protected function onDeleteCategory(e:GeneralBundleEvent):void{
				c.dispatch(new RpcEvent("product/category/delete",{"label":e.bundle["label"],"pageFrom":"1","size":"50"}));
			}
			protected function onAddCategory():void{
				var results:Array = Validator.validateAll([newCategoryValidate,isNotEqualsValidate]);
				if(results.length > 0){
					return;
				}
				c.dispatch(new RpcEvent("product/category/add",{"label":newCategory.text,"pageFrom":"1","size":"50"}));
			}
			protected function onAddProductCategorySuccess(e:GeneralBundleEvent):void{
				newCategory.text = "";
				var results : Array = e.bundle as Array;
				results.splice(0,0,{"label":"全部"});
				productCategory.dataProvider = new ArrayCollection(results);
				
			}
			protected function onAddProductCategoryFailed(e:GeneralBundleEvent):void{
				Alert.show(""+ e.bundle, "品类添加失败");
			}
			protected function onSwitchCategory(e:GeneralBundleEvent):void{
				//设置当前商品分类查询条件
				operationArea.container.put(ObjectNameDefine.CURRENT_PRODUCT_CATEGORY,e.bundle.label);
				//打开商品管理页面
				operationArea.open(ObjectNameDefine.PRODUCTS_MODULE_ID,"商品","manage/modules/product/Products.swf","assets/products.jpeg",true,true);
			}


			protected function newCategory_keyUpHandler(e:KeyboardEvent):void
			{
				switch(e.keyCode){
					case 13:
						onAddCategory();
						break;
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:RegExpValidator id="newCategoryValidate" expression="^[\u4e00-\u9fa5,\w]\{2,20\}$" flags="g" noMatchError="品类名称不正确" required="true" requiredFieldError="请填写品类名称" source="{newCategory}" property="text"/>
		<util:IsNotEqualsValidate word="全部" source="{newCategory}"  property="text"  id="isNotEqualsValidate" equalsError="“全部”不能作为品类名称"/>
	</fx:Declarations>
	<s:HGroup width="100%" height="100%" gap="0" >
		<s:VGroup width="20%" height="100%" gap="0">
			<s:Button label="资源中心" id="resourceCenter" width="100%" height="24" fontSize="16"  chromeColor="#696969" click="onResourceCenter(event)"/>
			<mx:Accordion id="category" width="100%" height="100%">
				<s:NavigatorContent  label="商品" textAlign="center" width="100%" height="100%">
					<s:Scroller width="100%" height="95%">
						<s:DataGroup id="productCategory" width="100%"
									 clipAndEnableScrolling="true"
									 itemRenderer="manage.modules.resource.CategoryItemRenderer"
									 >
							<s:layout>
								<s:VerticalLayout />
							</s:layout>
						</s:DataGroup>
					</s:Scroller>
					<s:HGroup bottom="2" width="100%" verticalAlign="middle">
						<s:Label text="添加品类："/>
						<s:TextInput id="newCategory" left="0" width="100%" textAlign="left" keyUp = "newCategory_keyUpHandler(event)"/>
						<mx:LinkButton label="保存" click="onAddCategory()"/>
					</s:HGroup>
				</s:NavigatorContent>
				<s:NavigatorContent id="consumeRecords" label="消费记录" textAlign="center" width="100%" height="100%">
					
				</s:NavigatorContent>
			</mx:Accordion>	
		</s:VGroup>
		<c:TabNavigator id="operationArea"  width="100%" height="100%"/>
	</s:HGroup>
</c:AbstractInnerModule>