<?xml version="1.0" encoding="utf-8"?>
<c:AbstractInnerModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:c="org.lcf.*"
					   layout="absolute" width="100%" height="100%" creationComplete="onInit(event)" xmlns:util="util.*" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.validators.Validator;
			
			import org.lcf.EventListenerModel;
			import org.lcf.util.GeneralBundleEvent;
			
			import rpc.RpcEvent;
			import rpc.RpcService;
			
			import spark.components.DataGroup;
			import spark.components.List;
			
			import util.EventTypeDefine;
			import util.ObjectNameDefine;
			
			
			protected var defs:Array;
			
			protected var pageFrom:int = 1;
			protected var size = 50;
			
			protected function onInit(event:FlexEvent):void{
				//注册列表删除和编辑监听事件
				productsDisplay.addEventListener(EventTypeDefine.PRODUCT_DELETE_EVENT,onDelete);
				productsDisplay.addEventListener(EventTypeDefine.PRODUCT_EDIT_EVENT,onEdit);
				searchCondition.addEventListener(FocusEvent.FOCUS_IN,function(){IME.enabled = true});
				//获取商品定义 
				var arg:Object = new Object();
				arg["collection"] = "productDefine";
				arg["condition"] = "{}";
				arg["order"] = "{\"order\":1}";
				this.c.dispatch(new RpcEvent("data/findAll",arg));
				//获取商品分类
				var productCategory:String = String(this.c.get(ObjectNameDefine.CURRENT_PRODUCT_CATEGORY));
				
				if(!("全部" == productCategory || productCategory == null || productCategory == "")){
					searchCondition.textInput.text = "品类:" + productCategory;
				}
				search();	
			}
			public function onDelete(e:GeneralBundleEvent):void{
				Alert.show(e.bundle["商品名称"]);
			}
			public function onEdit(e:GeneralBundleEvent):void{
				Alert.show(e.bundle["商品名称"]);
			}
			override public function  get preferEventListeners():Array
			{
				var productDefine:EventListenerModel = new EventListenerModel("productDefine.findAll",onProductDefineFindAll);
				var products:EventListenerModel = new EventListenerModel("product.findByPage",onProductsFindByPage);
				var productAddSuccess:EventListenerModel = new EventListenerModel("addProduct.success",onProductAddSuccess);
				return [productDefine,products,productAddSuccess];
			}
			public function onProductAddSuccess(e:GeneralBundleEvent):void{
				search();
			}
			public function search():void{
				//查询商品，每页50
				var pArg:Object = new Object();
				pArg["collection"] = "product";
				//解析查询字符串
				var condition:Object = {};
				var allKeywordsCondition:Object = {};
				
				var sc:String = searchCondition.textInput.text
				var keywords:Array = sc.split(" ");
				
				for(var i:int = keywords.length -1 ; i >= 0; i--){
					if((keywords[i] as String) == ""){
						keywords.splice(i,1);
						continue;
					}
					var pair:Array = (keywords[i] as String).split(":");
					if(pair.length > 1){
						keywords.splice(i,1);
					}
					if(pair.length = 2){
						condition[pair[0]] = pair[1]; 
					}
				}
				if(keywords.length > 0){
					allKeywordsCondition["$all"] = keywords;
					condition["keywords"] = allKeywordsCondition;
				}
				pArg["condition"] = JSON.encode(condition);
				pArg["pageFrom"] = this.pageFrom;
				pArg["size"] = this.size;
				pArg["order"] = "{\"创建时间\":-1}";
				this.c.dispatch(new RpcEvent("data/findByPage",pArg));
			}
			/**
			 * 展示一列，如果是数组，则转换为字符串
			 */ 
			protected function columnShow(item:Object,column:DataGridColumn):String{
				if( item[column.dataField] is Array){
					var items:Array = item[column.dataField] as Array;
					var label:String = "";
					for (var i:int=0;i< items.length;i++){
						label += (items[i] + ' ');
					}
					return label;
				}
				else{
					return String(item[column.dataField]);
				}
			}
			public function onProductDefineFindAll(e:GeneralBundleEvent):void{
				defs = e.bundle as Array;
				this.c.put(ObjectNameDefine.PRODUCT_DEFINE,defs);
				var columns:Array = new Array();
				for (var i:int= 0; i< defs.length; i++){
					if(!defs[i]["showInList"])
						continue;
					var column:DataGridColumn = new DataGridColumn();
					column.headerText = defs[i]["itemName"];
					column.dataField = defs[i]["itemName"];
					column.dataTipFunction = columnShow;
					column.labelFunction = columnShow;
					columns.push(column);
				}
				var columnOper:DataGridColumn = new DataGridColumn();
				columnOper.headerText = "操作";
				columnOper.dataField = "操作";
				columnOper.itemRenderer = new ClassFactory(ProductOperateRenderer);
				columns.push(columnOper);
				productsDisplay.columns = columns;
			}
			public function onProductsFindByPage(e:GeneralBundleEvent):void{
				var defs:Array = e.bundle as Array;
				var defCollection:ArrayCollection = new ArrayCollection(defs);
				productsDisplay.dataProvider = defCollection;
			}
			public function add():void{
				var pa:ProductAdd = new ProductAdd();
				this.c.put("product.add",pa);
				//获得应用主窗口，做为父窗口
				var parent:DisplayObject = this.c.get(util.ObjectNameDefine.APP) as DisplayObject;
				//打开
				PopUpManager.addPopUp(pa,this,true);
				PopUpManager.centerPopUp(pa);
				PopUpManager.bringToFront(pa);
			}
		]]>
	</fx:Script>
	<s:VGroup  width="100%" height="100%" >
		<s:HGroup verticalAlign="middle" width="600" gap="10">
			<s:Label paddingLeft="120" text=""/> 
			<s:ComboBox id="searchCondition" width="300" fontSize="16" />
			<s:Button label="搜索" click="search()"/>
			<mx:Spacer width="100%"/>
			<s:Button label="添加商品" click="add()"/>
		</s:HGroup>
	
		<mx:DataGrid id="productsDisplay" width="100%" height="100%" textAlign="center"/>
		<s:HGroup  width="600">
			<s:Label text="共计\{\}种商品" paddingLeft="125"/>
			<mx:Spacer width="100%"/>
			<s:Label text="上一页" toolTip="上一页"/>
			<s:Label id="currentPageBottom" text="1"/>
			<s:Label text="下一页" toolTip="下一页" textDecoration="underline"/>	
		</s:HGroup>
		
	</s:VGroup>
</c:AbstractInnerModule>
